// Totaly Twisted Â© 2010// Made by: Daniel van Willigen// Last update 06-11-10// Define variablesvar omf = 2.834645;var presscancelbutton = 0;var creativeline = 0;//Run menumenuinterface();if (presscancelbutton >= 0) {		// Set line total	var maxlines = new Number (win.menugroup.linesgroup.totallinesgroup.et.text)+1;	// Create new document	docPreset = new DocumentPreset;	docPreset.width = 200*omf;	docPreset.colorMode = DocumentColorSpace.CMYK	docPreset.previewMode = DocumentPreviewMode.OverprintPreview;	docPreset.rasterResolution = DocumentRasterResolution.HighResolution;	docPreset.title = 'Totaly Twisted';	docPreset.rulerUnits = RulerUnits.Millimeters;	docPreset.height = (200*omf);	docPreset.name = 'Totaly Twisted';	var doc = app.documents.addDocument(DocumentColorSpace.CMYK,docPreset);	app.activeDocument.layers[0].name = 'Totaly Twisted';	// Set rulers zeropoint	zet_nulpunt();	// Define artwork variables	var linelength = 10*omf	var anchorpointlength = new Number (win.menugroup.linegroup.anchorpointlengthgroup.et.text);	var angle = new Number (win.menugroup.linegroup.anglegroup.et.text);	var anchorpointheight = (anchorpointlength * (Math.sin (angle)));	var anchorpointwidth = (anchorpointlength * (Math.cos (angle)));	var startpointa = 0;	var startpointb = 100;	var startpointc = 200;	var startpointd = 300;	var startpointe= 400;	var startpointy = 0;	for (var i=1 ; i < maxlines; i++) {		// Set line width		if(win.menugroup.linesgroup.randomwidth.value==false && win.menugroup.linesgroup.widthbigtosmall.value==false && win.menugroup.linesgroup.widthsmalltobig.value==false){					var linewidth = win.menugroup.linesgroup.widthgroup.et.text;		}else if(win.menugroup.linesgroup.randomwidth.value==true  && win.menugroup.linesgroup.widthbigtosmall.value==false && win.menugroup.linesgroup.widthsmalltobig.value==false){			var linewidth = Math.random();		}			if(win.menugroup.linesgroup.widthbigtosmall.value==true){				if (creativeline==1){				var linewidth = new Number (linewidth) - 0.1;				if (linewidth < 0){var linewidth = 0;};			}			if (creativeline==0){				var linewidth = win.menugroup.linesgroup.widthgroup.et.text;				var creativeline = 1;			}		}		if(win.menugroup.linesgroup.widthsmalltobig.value==true){					if (creativeline==1){				var linewidth = new Number (linewidth) + 0.1;			}			if (creativeline==0){				var linewidth = win.menugroup.linesgroup.widthgroup.et.text;				var creativeline = 1;			}		}		// Set tint		if(win.menugroup.colorgroup.gradientcolor.value==false){			if(win.menugroup.percentagegroup.randomtint.value==false){				var newtint = win.menugroup.percentagegroup.tintgroup.et.text;			}else if(win.menugroup.percentagegroup.randomtint.value==true){				var newtint = Math.random()*100;			}		}else if(win.menugroup.colorgroup.gradientcolor.value==true){			var newtint = win.menugroup.percentagegroup.tintgroup.et.text-i;		}				// Define color		if(win.menugroup.colorgroup.randomcolor.value==false){			var newSpot = doc.spots.add();			var lineColor = new CMYKColor();			lineColor.cyan = win.menugroup.colorgroup.cyangroup.et.text;			lineColor.magenta = win.menugroup.colorgroup.magentagroup.et.text;			lineColor.yellow = win.menugroup.colorgroup.yellowgroup.et.text;			lineColor.black = win.menugroup.colorgroup.blackgroup.et.text;			newSpot.name = 'lineColor'+i;			newSpot.colorType = ColorModel.PROCESS;			newSpot.color = lineColor;			var newSpotColor = new SpotColor();			newSpotColor.spot = newSpot;		}else if(win.menugroup.colorgroup.randomcolor.value==true){			var newSpot = doc.spots.add();			var lineColor = new CMYKColor();			lineColor.cyan = Math.random()*100;			lineColor.magenta = Math.random()*100;			lineColor.yellow = Math.random()*100;			lineColor.black = Math.random()*100;			newSpot.name = 'lineColor'+i;			newSpot.colorType = ColorModel.PROCESS;			newSpot.color = lineColor;			var newSpotColor = new SpotColor();			newSpotColor.spot = newSpot;		}				// draw line		var line = app.activeDocument.pathItems.add();		var points = [[((startpointa)*omf),((startpointy)*omf)] , [((startpointb)*omf),((startpointy)*omf)] , [((startpointc)*omf),((startpointy)*omf)] , [((startpointd)*omf),((startpointy)*omf)] , [((startpointe)*omf),((startpointy)*omf)]];		line.setEntirePath(points);		line.pathPoints[0].rightDirection = Array(((startpointa*omf)+(anchorpointwidth*omf)),((startpointy*omf)+(anchorpointheight*omf)));		line.pathPoints[1].leftDirection = Array(((startpointb*omf)-(anchorpointwidth*omf)),((startpointy*omf)-(anchorpointheight*omf)));		line.pathPoints[1].rightDirection = Array(((startpointb*omf)+(anchorpointwidth*omf)),((startpointy*omf)+(anchorpointheight*omf)));		line.pathPoints[2].leftDirection = Array(((startpointc*omf)-(anchorpointwidth*omf)),((startpointy*omf)-(anchorpointheight*omf)));		line.pathPoints[2].rightDirection = Array(((startpointc*omf)+(anchorpointwidth*omf)),((startpointy*omf)+(anchorpointheight*omf)));		line.pathPoints[3].leftDirection = Array(((startpointd*omf)-(anchorpointwidth*omf)),((startpointy*omf)-(anchorpointheight*omf)));		line.pathPoints[3].rightDirection = Array(((startpointd*omf)+(anchorpointwidth*omf)),((startpointy*omf)+(anchorpointheight*omf)));		line.pathPoints[4].leftDirection = Array(((startpointe*omf)-(anchorpointwidth*omf)),((startpointy*omf)-(anchorpointheight*omf)));		line.pathPoints[4].rightDirection = Array(((startpointe*omf)+(anchorpointwidth*omf)),((startpointy*omf)+(anchorpointheight*omf)));		line.filled= false;		line.stroked = true;		line.fillOverprint = false;		line.strokeOverprint = true;		line.strokeWidth = linewidth*omf;		line.strokeColor = doc.swatches['lineColor'+i].color;		line.strokeCap = StrokeCap.ROUNDENDCAP		line.strokeColor.tint = newtint;		startpointa = startpointa +1;		startpointb = startpointb +1;		startpointd = startpointd -1;		startpointe = startpointe -1;		startpointy = startpointy - new Number (win.menugroup.linesgroup.gapgroup.et.text);	}	var illustratorversion = app.version;	var illustratorversionarray = illustratorversion.split('.');	if(illustratorversionarray[0]>13){		app.activeDocument.artboards[0].artboardRect = app.activeDocument.visibleBounds;	}	zet_nulpunt();	zoomcenterpage()	};function menuinterface(){	res =	"dialog { \		text:'Totaly twisted:', \		properties:{ closeOnKey:'OSCmnd+W', resizeable:false}, \			ddl: DropDownList { alignment:'left', preferredSize: [260, 20] }, \			menugroup: Panel { orientation:'stack', preferredSize: [200, 20], alignChildren:'top', text: 'Anchorpoints', \				linegroup: Group { alignment:'top', orientation:'column', preferredSize: [200, 20] \					anglegroup: Group { alignment:'left',\						st: StaticText { text:'Angle     :' }, \						sl: Slider { minvalue:-360, maxvalue:360, value: 45 }, \						et: EditText { characters:4, justify:'right', text:'45' } \					} \					anchorpointlengthgroup: Group { alignment:'left',\						st: StaticText { text:'Length   :' }, \						sl: Slider { minvalue:0, maxvalue:1000, value: 100 }, \						et: EditText { characters:4, justify:'right', text:'100' } \					} \				} \				colorgroup: Group { orientation:'column', preferredSize: [200, 20], alignChildren:'top', \					cyangroup: Group { alignment:'left',\						st: StaticText { text:'Cyan     :' }, \						sl: Slider { minvalue:0, maxvalue:100, value:0 }, \						et: EditText { characters:4, justify:'right', text:'0' } \						} \					magentagroup: Group { alignment:'left',\						st: StaticText { text:'Magenta:' }, \						sl: Slider { minvalue:0, maxvalue:100, value:0 }, \						et: EditText { characters:4, justify:'right', text:'0' } \						} \					yellowgroup: Group { alignment:'left',\						st: StaticText { text:'Yellow   :' }, \						sl: Slider { minvalue:0, maxvalue:100, value:0 }, \						et: EditText { characters:4, justify:'right', text:'0' } \						} \					blackgroup: Group { alignment:'left',\						st: StaticText { text:'Black     :' }, \						sl: Slider { minvalue:0, maxvalue:100, value:100 }, \						et: EditText { characters:4, justify:'right', text:'100' } \						} \					randomcolor: Checkbox { \					alignment:'left', text:'Set color to random', value:false \					}, \					gradientcolor: Checkbox { \					alignment:'left', text:'Set color to gradient', value:false \					}, \				}, \				percentagegroup: Group { orientation:'column', preferredSize: [200, 20], alignChildren:'top', \					tintgroup: Group { alignment:'left',\						st: StaticText { text:'Tint      :' }, \						sl: Slider { minvalue:0, maxvalue:100, value:100 }, \						et: EditText { characters:4, justify:'right', text:'100' } \						} \					randomtint: Checkbox { \					alignment:'left', text:'Set tint to random', value:false \					}, \				}, \				linesgroup: Group { orientation:'column', preferredSize: [200, 20], alignChildren:'top', \					totallinesgroup: Group { alignment:'left',\						st: StaticText { text:'Lines     :' }, \						sl: Slider { minvalue:0, maxvalue:70, value:51 }, \						et: EditText { characters:4, justify:'right', text:'51' } \						} \					gapgroup: Group { alignment:'left',\						st: StaticText { text:'Gap       :' }, \						sl: Slider { minvalue:0, maxvalue:100, value:1 }, \						et: EditText { characters:4, justify:'right', text:'1' } \						} \					widthgroup: Group { alignment:'left',\						st: StaticText { text:'Width    :' }, \						sl: Slider { minvalue:0, maxvalue:10, value:0.1 }, \						et: EditText { characters:4, justify:'right', text:'0.1' } \						} \					randomwidth: Checkbox { \					alignment:'left', text:'Set line width to random', value:false \					}, \					widthbigtosmall: Checkbox { \					alignment:'left', text:'Set line width from big to small', value:false \					}, \					widthsmalltobig: Checkbox { \					alignment:'left', text:'Set line width from small to big', value:false \					}, \				}, \			} \			buttons: Group { orientation: 'row', alignment: 'center', \			cancelBtn: Button { text:'Cancel', properties:{name:'cancel'} }, \			doneBtn: Button { text:'Ok', properties:{name:'ok'} }, \		} \	}";	win = new Window (res);	win.frameLocation = [100, 100];		// set dropdownlist	win.ddl.onChange = function () {		if (this.selection != null) {			for (var g = 0; g < this.items.length; g++)				this.items[g].group.visible = false; 				this.selection.group.visible = true;			}		if (win.ddl.selection == 0){win.menugroup.text = 'Anchorpoints';}		if (win.ddl.selection == 1){win.menugroup.text = 'Color';}		if (win.ddl.selection == 2){win.menugroup.text = 'Tint';}		if (win.ddl.selection == 3){win.menugroup.text = 'Lines';}		}	var item = win.ddl.add ('item', 'Anchorpoints');	item.group = win.menugroup.linegroup;	item = win.ddl.add ('item', 'Color');	item.group = win.menugroup.colorgroup;	item = win.ddl.add ('item', 'Tint');	item.group = win.menugroup.percentagegroup;	item = win.ddl.add ('item', 'Lines');	item.group = win.menugroup.linesgroup;	win.ddl.selection = win.ddl.items[0];		// set color checkbox	win.menugroup.colorgroup.randomcolor.onClick = function () { 		if (win.menugroup.colorgroup.randomcolor.value==true){			win.menugroup.colorgroup.cyangroup.enabled = false;			win.menugroup.colorgroup.magentagroup.enabled = false;			win.menugroup.colorgroup.yellowgroup.enabled = false;			win.menugroup.colorgroup.blackgroup.enabled = false;		};		if (win.menugroup.colorgroup.randomcolor.value==false){			win.menugroup.colorgroup.cyangroup.enabled = true;			win.menugroup.colorgroup.magentagroup.enabled = true;			win.menugroup.colorgroup.yellowgroup.enabled = true;			win.menugroup.colorgroup.blackgroup.enabled = true;		};	}	// set gradient checkbox	win.menugroup.colorgroup.gradientcolor.onClick = function () { 		if (win.menugroup.colorgroup.gradientcolor.value==true){			win.menugroup.percentagegroup.tintgroup.enabled = false;			win.menugroup.percentagegroup.randomtint.enabled = false;		};		if (win.menugroup.colorgroup.gradientcolor.value==false){			win.menugroup.percentagegroup.tintgroup.enabled = true;			win.menugroup.percentagegroup.randomtint.enabled = true;		};	}	// set lines width checkbox	win.menugroup.linesgroup.randomwidth.onClick = function () { 		if (win.menugroup.linesgroup.randomwidth.value==true){			win.menugroup.linesgroup.widthgroup.enabled = false;			win.menugroup.linesgroup.widthbigtosmall.enabled = false;			win.menugroup.linesgroup.widthsmalltobig.enabled = false;		};		if (win.menugroup.linesgroup.randomwidth.value==false){			win.menugroup.linesgroup.widthgroup.enabled = true;			win.menugroup.linesgroup.widthbigtosmall.enabled = true;			win.menugroup.linesgroup.widthsmalltobig.enabled = true;		};	}	// set lines widthbigtosmall checkbox	win.menugroup.linesgroup.widthbigtosmall.onClick = function () { 		if (win.menugroup.linesgroup.widthbigtosmall.value==true){			win.menugroup.linesgroup.randomwidth.enabled = false;			win.menugroup.linesgroup.widthsmalltobig.enabled = false;		};		if (win.menugroup.linesgroup.widthbigtosmall.value==false){			win.menugroup.linesgroup.randomwidth.enabled = true;			win.menugroup.linesgroup.widthsmalltobig.enabled = true;		};	}	// set lines widthsmalltobig checkbox	win.menugroup.linesgroup.widthsmalltobig.onClick = function () { 		if (win.menugroup.linesgroup.widthsmalltobig.value==true){			win.menugroup.linesgroup.randomwidth.enabled = false;			win.menugroup.linesgroup.widthbigtosmall.enabled = false;		};		if (win.menugroup.linesgroup.widthsmalltobig.value==false){			win.menugroup.linesgroup.randomwidth.enabled = true;			win.menugroup.linesgroup.widthbigtosmall.enabled = true;		};	}	// set tint checkbox	win.menugroup.percentagegroup.randomtint.onClick = function () { 		if (win.menugroup.percentagegroup.randomtint.value==true){			win.menugroup.percentagegroup.tintgroup.enabled = false;		};		if (win.menugroup.percentagegroup.randomtint.value==false){			win.menugroup.percentagegroup.tintgroup.enabled = true;		};	}	// sliders line		win.menugroup.linegroup.anglegroup.sl.onChange = function () { 		win.menugroup.linegroup.anglegroup.et.text = win.menugroup.linegroup.anglegroup.sl.value;	}	win.menugroup.linegroup.anchorpointlengthgroup.sl.onChange = function () { 		win.menugroup.linegroup.anchorpointlengthgroup.et.text = win.menugroup.linegroup.anchorpointlengthgroup.sl.value;	}	win.menugroup.linegroup.anglegroup.et.onChange = function () { 		if (win.menugroup.linegroup.anglegroup.et.text > 360){win.menugroup.linegroup.anglegroup.et.text = 360}		if (win.menugroup.linegroup.anglegroup.et.text < -360){win.menugroup.linegroup.anglegroup.et.text = -360}		win.menugroup.linegroup.anglegroup.sl.value= win.menugroup.linegroup.anglegroup.et.text	}	win.menugroup.linegroup.anchorpointlengthgroup.et.onChange = function () { 		if (win.menugroup.linegroup.anchorpointlengthgroup.et.text > 1000){win.menugroup.linegroup.anchorpointlengthgroup.et.text = 1000}		if (win.menugroup.linegroup.anchorpointlengthgroup.et.text < 0){win.menugroup.linegroup.anchorpointlengthgroup.et.text = 0}		win.menugroup.linegroup.anchorpointlengthgroup.sl.value= win.menugroup.linegroup.anchorpointlengthgroup.et.text	}	// sliders tint		win.menugroup.percentagegroup.tintgroup.sl.onChange = function () { 		win.menugroup.percentagegroup.tintgroup.et.text = Math.round(win.menugroup.percentagegroup.tintgroup.sl.value);	}	win.menugroup.percentagegroup.tintgroup.et.onChange = function () { 		if (win.menugroup.percentagegroup.tintgroup.et.text > 100){win.menugroup.percentagegroup.tintgroup.et.text = 100}		if (win.menugroup.percentagegroup.tintgroup.et.text < 0){win.menugroup.percentagegroup.tintgroup.et.text = 0}		win.menugroup.percentagegroup.tintgroup.sl.value= win.menugroup.percentagegroup.tintgroup.et.text	}	// sliders color	win.menugroup.colorgroup.cyangroup.sl.onChange = function () { 		win.menugroup.colorgroup.cyangroup.et.text = Math.round(win.menugroup.colorgroup.cyangroup.sl.value);	}	win.menugroup.colorgroup.magentagroup.sl.onChange = function () { 		win.menugroup.colorgroup.magentagroup.et.text = Math.round(win.menugroup.colorgroup.magentagroup.sl.value);	}	win.menugroup.colorgroup.yellowgroup.sl.onChange = function () { 		win.menugroup.colorgroup.yellowgroup.et.text = Math.round(win.menugroup.colorgroup.yellowgroup.sl.value);	}	win.menugroup.colorgroup.blackgroup.sl.onChange = function () { 		win.menugroup.colorgroup.blackgroup.et.text = Math.round(win.menugroup.colorgroup.blackgroup.sl.value);	}	win.menugroup.colorgroup.cyangroup.et.onChange = function () { 		if (win.menugroup.colorgroup.cyangroup.et.text > 100){win.menugroup.colorgroup.cyangroup.et.text = 100}		if (win.menugroup.colorgroup.cyangroup.et.text < 0){win.menugroup.colorgroup.cyangroup.et.text = 0}		win.menugroup.colorgroup.cyangroup.sl.value= win.menugroup.colorgroup.cyangroup.et.text	}	win.menugroup.colorgroup.magentagroup.et.onChange = function () { 		if (win.menugroup.colorgroup.magentagroup.et.text > 100){win.menugroup.colorgroup.magentagroup.et.text = 100}		if (win.menugroup.colorgroup.magentagroup.et.text < 0){win.menugroup.colorgroup.magentagroup.et.text = 0}		win.menugroup.colorgroup.magentagroup.sl.value= win.menugroup.colorgroup.magentagroup.et.text	}	win.menugroup.colorgroup.yellowgroup.et.onChange = function () { 		if (win.menugroup.colorgroup.yellowgroup.et.text > 100){win.menugroup.colorgroup.yellowgroup.et.text = 100}		if (win.menugroup.colorgroup.yellowgroup.et.text < 0){win.menugroup.colorgroup.yellowgroup.et.text = 0}		win.menugroup.colorgroup.yellowgroup.sl.value= win.menugroup.colorgroup.yellowgroup.et.text	}	win.menugroup.colorgroup.blackgroup.et.onChange = function () { 		if (win.menugroup.colorgroup.blackgroup.et.text > 100){win.menugroup.colorgroup.blackgroup.et.text = 100}		if (win.menugroup.colorgroup.blackgroup.et.text < 0){win.menugroup.colorgroup.blackgroup.et.text = 0}		win.menugroup.colorgroup.blackgroup.sl.value= win.menugroup.colorgroup.blackgroup.et.text	}	// sliders lines	win.menugroup.linesgroup.totallinesgroup.sl.onChange = function () { 		win.menugroup.linesgroup.totallinesgroup.et.text = Math.round(win.menugroup.linesgroup.totallinesgroup.sl.value);	}	win.menugroup.linesgroup.gapgroup.sl.onChange = function () { 		win.menugroup.linesgroup.gapgroup.et.text = win.menugroup.linesgroup.gapgroup.sl.value;	}	win.menugroup.linesgroup.widthgroup.sl.onChange = function () { 		win.menugroup.linesgroup.widthgroup.et.text = win.menugroup.linesgroup.widthgroup.sl.value;	}	win.menugroup.linesgroup.totallinesgroup.et.onChange = function () { 		if (win.menugroup.linesgroup.totallinesgroup.et.text > 70){win.menugroup.linesgroup.totallinesgroup.et.text = 70}		if (win.menugroup.linesgroup.totallinesgroup.et.text < 0){win.menugroup.linesgroup.totallinesgroup.et.text = 0}		win.menugroup.linesgroup.totallinesgroup.sl.value= win.menugroup.linesgroup.totallinesgroup.et.text	}	win.menugroup.linesgroup.gapgroup.et.onChange = function () { 		if (win.menugroup.linesgroup.gapgroup.et.text > 100){win.menugroup.linesgroup.gapgroup.et.text = 100}		if (win.menugroup.linesgroup.gapgroup.et.text < 0){win.menugroup.linesgroup.gapgroup.et.text = 0}		win.menugroup.linesgroup.gapgroup.sl.value= win.menugroup.linesgroup.gapgroup.et.text	}	win.menugroup.linesgroup.widthgroup.et.onChange = function () { 		if (win.menugroup.linesgroup.widthgroup.et.text > 10){win.menugroup.linesgroup.widthgroup.et.text = 10}		if (win.menugroup.linesgroup.widthgroup.et.text < 0){win.menugroup.linesgroup.widthgroup.et.text = 0}		win.menugroup.linesgroup.widthgroup.sl.value= win.menugroup.linesgroup.widthgroup.et.text	}	// add button	win.buttons.cancelBtn.onClick = function () {		presscancelbutton = presscancelbutton - 1;		wininfo.close();	};	win.buttons.doneBtn.onClick = function () {		win.close();	};		win.center();	win.show();};function zoomcenterpage(){		var myView=app.activeDocument.views[0];		myView.centerPoint = [(app.activeDocument.width/2),(app.activeDocument.height/2)];		myView.zoom = 1		myView.screenMode.FULLSCREEN;}	function zet_nulpunt(){	// zet nulpunt linksonder	app.activeDocument.pageOrigin = Array(0,0);	app.activeDocument.rulerOrigin = Array(0,0);}